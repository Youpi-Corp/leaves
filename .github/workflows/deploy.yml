name: Deploy to Production VM

on:
  push:
    branches: ['main'] # Se d√©clenche lors d'un push sur main
  workflow_dispatch: # Permet √©galement un d√©clenchement manuel

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to VM using SSH
        uses: appleboy/scp-action@master
        with:
          host: 79.137.11.184
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'dist/' # Le r√©pertoire de sortie de build Vite
          target: '/home/ubuntu/brainforest' # R√©pertoire cible sur la VM

      - name: Configure application on VM
        uses: appleboy/ssh-action@master
        with:
          host: 79.137.11.184
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Installation de Nginx si n√©cessaire
            if ! command -v nginx &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y nginx
            fi

            # Installation de Certbot pour les certificats SSL
            if ! command -v certbot &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-nginx
            else
            # S'assurer que le plugin Nginx est install√© m√™me si Certbot existe d√©j√†
            sudo apt-get install -y python3-certbot-nginx
            fi

            # D√©ploiement des fichiers vers le r√©pertoire web
            sudo mkdir -p /var/www/brainforest
            sudo cp -r /home/ubuntu/brainforest/dist/* /var/www/brainforest/
            sudo chown -R www-data:www-data /var/www/brainforest

            cat << 'EOF' | sudo tee /etc/nginx/sites-available/brainforest
            server {
                listen 80;
                listen 443 ssl;
                server_name brain-forest.works www.brain-forest.works;

                root /var/www/brainforest;
                index index.html;

                # Configuration SSL (sera mise √† jour par certbot)
                ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
                ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

                # Param√®tres SSL recommand√©s
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
                ssl_session_cache shared:SSL:10m;

                location / {
                    try_files $uri $uri/ /index.html;
                }
            }
            EOF

            # G√©n√©rer un certificat SSL auto-sign√© (en attendant Let's Encrypt)
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/ssl/private/nginx-selfsigned.key \
            -out /etc/ssl/certs/nginx-selfsigned.crt \
            -subj "/CN=localhost"

            # Activer le site et red√©marrer Nginx
            sudo ln -sf /etc/nginx/sites-available/brainforest /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx

            # Tenter d'obtenir automatiquement un certificat Let's Encrypt
            sudo certbot --nginx --non-interactive --agree-tos \
            --email basile.trebus-hamann@epitech.eu \
            -d brain-forest.works -d www.brain-forest.works || \
            echo "‚ö†Ô∏è Let's Encrypt n'a pas pu √™tre configur√© automatiquement."

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: 79.137.11.184
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if systemctl is-active --quiet nginx; then
              echo "‚úÖ Nginx is running"
            else
              echo "‚ùå Nginx is not running"
              exit 1
            fi

            # Display headers for diagnostics
            echo "Checking HTTP headers:"
            curl -v --head --request GET http://localhost 2>&1

            # Improved HTTP verification - capture status code
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
            if [[ "$HTTP_STATUS" =~ ^(200|301|302|307|308)$ ]]; then
              echo "‚úÖ HTTP site is accessible with code: $HTTP_STATUS"
            else
              echo "‚ùå HTTP site is not accessible. Received code: $HTTP_STATUS"
              exit 1
            fi

            if curl -sk --head --request GET https://localhost | grep "200 OK" > /dev/null; then
              echo "‚úÖ Site HTTPS is accessible"
            else
              echo "‚ùå Site HTTPS is not accessible"
              exit 1
            fi

            echo "üöÄ Deployment successful!"
